import React from 'react';
import CharacterBox from '../../../components/rick-and-morty/characters/character';
import { getCharacterById } from '../../../services/rick-and-morty-api';

const CharacterSSG = ({ character }) => {
	return (
		<div>
			<h2>
				In this case, we are using the function <span>getStaticPaths</span> that
				rave an array of values, and for each value we gonna have one new page
				with that parameter
			</h2>
			<h3>
				<p>
					We also have a fallback parameter, when this parameter is to{' '}
					<span>false</span> only pages generated by the <span>paths</span>{' '}
					parameter will be builded and visible. In this example, only ids 1, 2
					and 3 are on this array. In this case, all url with ID different from
					1, 2 or 3 will be redirected to 404 page
				</p>
				<p>
					But, if fallback is set to true, that means that even if some value is
					not on array <span>paths</span>, it can be shown, because this page
					will be created in running time.
				</p>
				<p>
					But to make it work, you should create an render case for invalid
					value, like loading
				</p>
			</h3>
			<div>
				{character ? <CharacterBox character={character} /> : <p>Loading...</p>}
			</div>
		</div>
	);
};

export const getStaticProps = async (context) => {
	const { params } = context;

	const characterId = params.id;

	const character = await getCharacterById(characterId);

	if (character.error) {
		return {
			notFound: true,
		};
	}

	return {
		props: { character },
	};
};

export const getStaticPaths = async () => {
	return {
		paths: [
			{ params: { id: '1' } },
			{ params: { id: '2' } },
			{ params: { id: '3' } },
		],
		fallback: true,
	};
};

export default CharacterSSG;
